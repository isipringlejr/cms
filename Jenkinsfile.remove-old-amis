pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-1' 
        GITHUB_CREDENTIALS = 'isi-github-pat'
        AWS_CREDENTIALS = 'aws-accessKey-secretKey'
    }

    triggers {
        // Schedule to run at midnight on the 1st of every month
        cron('0 0 1 * *')
    }
    }

    stages {
        stage('Setup') {
            steps {
                script {
      // Install AWS CLI if not already installed
                    sh '''
                    if ! command -v aws &> /dev/null; then
                        echo "AWS CLI not found. Installing..."
                        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                        unzip awscliv2.zip
                        sudo ./aws/install
                    else
                        echo "AWS CLI is already installed."
                }
            }
        }
  
        stage('Clean Old AMIs') {
            steps {
                script {
                    // Define the script content
                    def removeOldAmisScript = '''#!/bin/bash

# Title: remove_old_amis.sh - Remove Old AMIs After 4 Months

# Global Variables
RETENTION_PERIOD=120 # Days
REGION="${AWS_REGION}"

# Function to get the list of AMIs older than the retention period
get_old_amis() {
    local cutoff_date
    cutoff_date=$(date -d "-${RETENTION_PERIOD} days" +%Y-%m-%dT%H:%M:%S)
    
    local old_amis
    old_amis=$(aws ec2 describe-images --region "$REGION" --owners self \
        --query "Images[?CreationDate<'$cutoff_date'].ImageId" \
        --output text)
    
    printf "%s\\n" "$old_amis"
}

# Function to deregister an AMI
deregister_ami() {
    local ami_id=$1
    
    if ! aws ec2 deregister-image --region "$REGION" --image-id "$ami_id"; then
        printf "Failed to deregister AMI: %s\\n" "$ami_id" >&2
        return 1
    fi
    
    printf "Successfully deregistered AMI: %s\\n" "$ami_id"
}

# Function to remove snapshots associated with an AMI
remove_snapshots() {
    local ami_id=$1
    
    local snapshot_ids
    snapshot_ids=$(aws ec2 describe-images --region "$REGION" --image-ids "$ami_id" \
        --query "Images[].BlockDeviceMappings[].Ebs.SnapshotId" --output text)
    
    if [[ -z "$snapshot_ids" ]]; then
        printf "No snapshots found for AMI: %s\\n" "$ami_id"
        return
    fi
    
    local snapshot_id
    for snapshot_id in $snapshot_ids; do
        if ! aws ec2 delete-snapshot --region "$REGION" --snapshot-id "$snapshot_id"; then
            printf "Failed to delete snapshot: %s\\n" "$snapshot_id" >&2
            return 1
        fi
        
        printf "Successfully deleted snapshot: %s\\n" "$snapshot_id"
    done
}

# Main function
main() {
    local old_amis
    old_amis=$(get_old_amis)
    
    if [[ -z "$old_amis" ]]; then
        printf "No AMIs older than %d days found.\\n" "$RETENTION_PERIOD"
        return 0
    fi
    
    local ami_id
    for ami_id in $old_amis; do
        if ! deregister_ami "$ami_id"; then
            continue
        fi
        if ! remove_snapshots "$ami_id"; then
            continue
        fi
    done
}

main "$@"
'''

                    // Write the script content to a temporary file
                    writeFile file: 'remove_old_amis.sh', text: removeOldAmisScript
                    
                    // Make the script executable
                    sh 'chmod +x remove_old_amis.sh'
                    
                    // Execute the script
                    sh './remove_old_amis.sh'
                }
            }
        }
    }

    

